// recursive way of solving problem 

 void help(TreeNode* root, vector <int>& ans )
 {
     if(root==NULL) return ;
     ans.push_back(root->val);
     help(root->left, ans);
     help(root->right,ans);
 }
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
       vector<int> ans;
       help(root,ans);
       return ans;    
    }
};

______________________________________________________________________________________________________________________

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 // iterative way of preorder traversal  using stack
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> preorder;
        if(root==NULL) return preorder;
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty())
        {
            root=st.top();
            st.pop();
            preorder.push_back(root->val);
            if(root->right!=NULL)
            {
            st.push(root->right);
            }
            if(root->left!=NULL)
            {
            st.push(root->left);
            }
        }
        return preorder;
    }
};
